// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    user_id, telegram_username, full_name, username, "role", phone
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING user_id, telegram_username, full_name, username, role, phone, created_at
`

type CreateUserParams struct {
	UserID           int64       `json:"user_id"`
	TelegramUsername pgtype.Text `json:"telegram_username"`
	FullName         string      `json:"full_name"`
	Username         string      `json:"username"`
	Role             string      `json:"role"`
	Phone            string      `json:"phone"`
}

func (q *Queries) CreateUser(ctx context.Context, db DBTX, arg CreateUserParams) (User, error) {
	row := db.QueryRow(ctx, createUser,
		arg.UserID,
		arg.TelegramUsername,
		arg.FullName,
		arg.Username,
		arg.Role,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.TelegramUsername,
		&i.FullName,
		&i.Username,
		&i.Role,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, db DBTX, userID int64) error {
	_, err := db.Exec(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, telegram_username, full_name, username, role, phone, created_at FROM users
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, db DBTX, userID int64) (User, error) {
	row := db.QueryRow(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.TelegramUsername,
		&i.FullName,
		&i.Username,
		&i.Role,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}
