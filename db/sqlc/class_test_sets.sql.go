// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: class_test_sets.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addTestSetToClass = `-- name: AddTestSetToClass :exec
INSERT INTO class_test_sets (
    class_id, test_set_id
) VALUES (
    $1, $2
) ON CONFLICT DO NOTHING
`

type AddTestSetToClassParams struct {
	ClassID   int64 `json:"class_id"`
	TestSetID int64 `json:"test_set_id"`
}

func (q *Queries) AddTestSetToClass(ctx context.Context, db DBTX, arg AddTestSetToClassParams) error {
	_, err := db.Exec(ctx, addTestSetToClass, arg.ClassID, arg.TestSetID)
	return err
}

const deleteTestSetFromClass = `-- name: DeleteTestSetFromClass :exec
DELETE FROM class_test_sets
WHERE test_set_id = $1
`

func (q *Queries) DeleteTestSetFromClass(ctx context.Context, db DBTX, testSetID int64) error {
	_, err := db.Exec(ctx, deleteTestSetFromClass, testSetID)
	return err
}

const listTestSetsByClassID = `-- name: ListTestSetsByClassID :many

SELECT
  ts.test_set_id,
  ts.test_set_name,
  ts.time_limit
FROM
  test_sets ts
INNER JOIN
  class_test_sets cts ON cts.test_set_id = ts.test_set_id
WHERE
  cts.class_id = $1
LIMIT $2
OFFSET $3
`

type ListTestSetsByClassIDParams struct {
	ClassID int64 `json:"class_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

type ListTestSetsByClassIDRow struct {
	TestSetID   int64       `json:"test_set_id"`
	TestSetName string      `json:"test_set_name"`
	TimeLimit   pgtype.Int4 `json:"time_limit"`
}

// -- name: GetTestSetsByClassID :many
// SELECT * FROM class_test_sets
// WHERE class_id = $1;
func (q *Queries) ListTestSetsByClassID(ctx context.Context, db DBTX, arg ListTestSetsByClassIDParams) ([]ListTestSetsByClassIDRow, error) {
	rows, err := db.Query(ctx, listTestSetsByClassID, arg.ClassID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTestSetsByClassIDRow{}
	for rows.Next() {
		var i ListTestSetsByClassIDRow
		if err := rows.Scan(&i.TestSetID, &i.TestSetName, &i.TimeLimit); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
