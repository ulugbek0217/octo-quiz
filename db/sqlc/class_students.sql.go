// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: class_students.sql

package db

import (
	"context"
)

const addStudentToClass = `-- name: AddStudentToClass :one
INSERT INTO class_students (
    class_id, student_id
) VALUES (
    $1, $2
) RETURNING class_id, student_id
`

type AddStudentToClassParams struct {
	ClassID   int64 `json:"class_id"`
	StudentID int64 `json:"student_id"`
}

func (q *Queries) AddStudentToClass(ctx context.Context, db DBTX, arg AddStudentToClassParams) (ClassStudent, error) {
	row := db.QueryRow(ctx, addStudentToClass, arg.ClassID, arg.StudentID)
	var i ClassStudent
	err := row.Scan(&i.ClassID, &i.StudentID)
	return i, err
}

const deleteStudentFromClass = `-- name: DeleteStudentFromClass :exec
DELETE FROM class_students
WHERE student_id = $1
`

func (q *Queries) DeleteStudentFromClass(ctx context.Context, db DBTX, studentID int64) error {
	_, err := db.Exec(ctx, deleteStudentFromClass, studentID)
	return err
}

const listClassStudents = `-- name: ListClassStudents :many
SELECT class_id, student_id FROM class_students
WHERE class_id = $1
LIMIT $2
OFFSET $3
`

type ListClassStudentsParams struct {
	ClassID int64 `json:"class_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListClassStudents(ctx context.Context, db DBTX, arg ListClassStudentsParams) ([]ClassStudent, error) {
	rows, err := db.Query(ctx, listClassStudents, arg.ClassID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClassStudent{}
	for rows.Next() {
		var i ClassStudent
		if err := rows.Scan(&i.ClassID, &i.StudentID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
